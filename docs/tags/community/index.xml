<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>community on cbrtl</title>
    <link>https://cbrtl.github.io/tags/community/</link>
    <description>Recent content in community on cbrtl</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cbrtl.github.io/tags/community/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello world!</title>
      <link>https://cbrtl.github.io/posts/what-and-why/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/what-and-why/</guid>
      <description>Introducing cbrtl to the world</description>
      <content:encoded><![CDATA[<h1 id="what-is-cbrtl">What is cbrtl?</h1>
<p><strong>cbrtl</strong> is an attempt at creating a tight knit group of programmers who like making fun
stuff and being involved in Open Source development. We are based out of Silicon Institute of
Technology, Odisha.</p>
<h2 id="what-do-we-do-here">What do we do here?</h2>
<p>A lot of stuff, actually!</p>
<ul>
<li><strong>Create</strong> <em>fun</em> and <em>unique</em> projects. Either in groups or in isolation.</li>
<li>Organize community and online <strong>showcases</strong> for group and individual projects.</li>
<li><strong>Contribute</strong> to Open Source projects both in cbrtl and in other communities.</li>
<li>Conduct <strong>code reviews</strong> and <strong>JAM</strong>s.</li>
<li>Share lesser known <strong>resources</strong> to learn.</li>
<li>Write blog posts about the eccentricities of everyday software. Ones that you wish you&rsquo;d have found
when starting out.</li>
</ul>
<h2 id="what-is-the-end-goal">What is the end goal?</h2>
<p>Merely to promote Open Source culture and proper software development within our college.</p>
<h2 id="where-does-cbrtl-operate-from">Where does cbrtl operate from?</h2>
<p>Primarily, we are a bunch of students from Silicon Institute of Technology, Odisha.
The idea has been to promote the spirit of open source among our students. That said,
we are always open to having new members from anywhere.</p>
<h2 id="how-far-down-the-road-are-we">How far down the road are we?</h2>
<p>Not that far, the egg has just been laid. As of the time of writing this post, we have just started out. Remember that cbrtl is an <em>attempt</em> at creating a place for people to forge software.
For the effort to work out, we are looking for active participation from <em>you</em>.</p>
<h2 id="what-can-i-do">What can I do?</h2>
<p>Just what you&rsquo;ve been doing so far, but with more people!</p>
<p>If you have projects that you have already been working on, let us know and we&rsquo;ll put them on the
cbrtl page for more people to see.
Note that there is some criteria that projects must qualify, some of these are intentionally vague.
But as long as you&rsquo;re doing more than following a course or tutorial, it&rsquo;s most likely going to be accepted :)</p>
<h1 id="volunteering-to-cbrtl">Volunteering to cbrtl</h1>
<p>We are looking for volunteers for some roles.
Note however, that there is no strict mandate for responsibilities.
As long as you&rsquo;re capable of adding <em>something</em> of value, no matter how small, shoot us a message!
We&rsquo;re looking for some help with:</p>
<ul>
<li>
<p><strong>Code reviewers</strong>: If you have experience contributing to FOSS or writing code for user/developer
facing products, perhaps you can volunteer and help us out here :)</p>
</li>
<li>
<p><strong>Editors</strong>: We plan on writing frequent blog posts. But both the technical content and the english
material can use a second pair of eyes to help catch mistakes or inconsistent writing. If you have
done some technical writing before, you can volunteer for reviewing the content in blog posts!</p>
</li>
<li>
<p><strong>Technical Writers</strong>: If you have experience writing code but are usually on a tight schedule, you
may be able to join us and share your knowledge. We want to mandate a high quality in our posts, so any
tutorial/how-to guide that has been done a million times before is generally discouraged. We want
to avoid redundant topics like &ldquo;How to build a todo app with React&rdquo; and promote posts and dev-logs /
journals that are fun to read and explore.</p>
</li>
<li>
<p><strong>Frontend devs</strong>: Currently, the cbrtl website is bland and not-so-catchy.
While minimalism is the core idea, we can definitely use some front-end developers to help keep the UI fresh, responsive and modern.</p>
</li>
<li>
<p><strong>Moderators</strong>: To help keep the community together on discord and github.</p>
</li>
</ul>
<p><strong>NOTE</strong> We do not expect any level of time commitment from volunteers, as long as you can make small
contributions, we appreciate it. That is what <em>volunteering</em> is after all :)</p>
<h1 id="the-kind-of-software-we-want-to-write">The kind of software we want to write</h1>
<p>We firmly believe in re-inventing the wheel.
Writing software close to the metal helps us closely understand the inner workings of tools we use
everyday and take for granted.
While any creative project is welcome, here are some ideas that adhere to the aforementioned:</p>
<ul>
<li>Compilers</li>
<li>Virtual Machines and Interpreters</li>
<li>Game Engines</li>
<li>Operating Systems</li>
<li>Search Engines</li>
<li>Database engines</li>
<li>Voxel renderers</li>
<li>TCP/IP stack</li>
<li>VCS</li>
</ul>
<p>In short, we encourage all kinds of creative projects no matter how basic. But you can expect
the above group projects to come to life as the community grows. Remember that all of the above
is also regular software that we tend to take for granted which can be (and has been) written from scratch.</p>
<h2 id="showcasing-your-project">Showcasing your project</h2>
<p><a href="https://cbrtl.github.io/posts/project-showcase/">This</a> post has something to say about project showcases, so you can go read up on that.
If you want to showcase your project on our github org, then reach out to us on discord or the mailing list :)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>zuzu</title>
      <link>https://cbrtl.github.io/posts/zuzu/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/zuzu/</guid>
      <description>Zuzu converts all your markdown files into static htmls pages to be rendered quickly. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets.</description>
      <content:encoded><![CDATA[<h1 id="zuzu">Zuzu</h1>
<blockquote>
<p>Static Site Generator</p>
</blockquote>
<h3 id="zuzu-is-a-minimal-static-site-generator">Zuzu is a minimal static site generator.</h3>
<p>Zuzu converts all your markdown files into static htmls pages to be rendered quickly. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets. <a href="https://anubhavp.me/blog">This blog</a>, for example, has been written using this generator. This enables noobs like me to write blogs without having to learn a lot of code! It is a very simple and easy to use generator. All you need to do is to write a markdown file and it will be rendered as a page ;) You can create a new page by creating a new markdown file.</p>
<h2 id="how-does-it-work-">How does it work ?</h2>
<p>Zuzu parses the markdown file using <em>javascript</em> and renders it as <em>html documents</em>. It then saves the html files in the <code>public</code> folder. The public folder, with <code>index.html</code> file, is the final output of the generator and this can be deployed and hosted in various platforms. This particular blog has been deployed on <a href="https://anubhavp.me/blog/">Github Pages</a>.</p>
<h3 id="1-create-a-markdown-file">1. Create a markdown file</h3>
<pre><code># This is a title
This is a paragraph
This is another paragraph
This is a list:
* Item 1
* Item 2
* Item 3
This is a code block:
```
print(&quot;Hello World&quot;)
```
This is a table:
| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| 1        | 2        | 3        |
| 4        | 5        | 6        |
| 7        | 8        | 9        |
This is a link: [zuzu](https://anubhavp.me/blog/zuzu.html)
</code></pre>
<h3 id="2-run-the-generator-and-find-your-blog">2. Run the generator and find your blog</h3>
<p>Run <code>npm run generate</code> in the console.
You&rsquo;ll now see the blog in the public folder! Run the index.html file in your browser to see your blog. You may now deploy your site
to a server.</p>
<h2 id="the-static-site-generator">The Static Site Generator</h2>
<h3 id="1-libraries-used">1. Libraries used</h3>
<ul>
<li><a href="https://www.npmjs.com/package/markdown-it">MarkdownIt</a> <em>Markdown parser done right.</em></li>
<li><a href="https://www.npmjs.com/package/markdown-it-anchor">MarkdownItAnchor</a> <em>Header anchors for markdown-it.</em></li>
<li><a href="https://www.npmjs.com/package/glob">Glob</a> <em>&ldquo;Globs&rdquo; are the patterns you type when you do stuff like ls .js on the command line, or put build/ in a .gitignore file.</em></li>
<li><a href="https://www.npmjs.com/package/gray-matter">Gray-Matter</a> <em>Parse front-matter from a string or file.</em></li>
<li><a href="https://npmjs.com/package/mkdirp">Mkdirp</a> <em>Create Dirs if they do not exist.</em></li>
</ul>
<h3 id="2-workflow">2. Workflow</h3>
<p>This is the code for the generator.js.
The code works in the following way:</p>
<ol>
<li><code>fs.readfile() from fs</code> reads all the files from the said directory and stores then in <code>filename</code> using <code>glob</code>. It is a <code>glob</code> that matches all the files in the directory. The <code>file system</code> module allows you to work with the file system on your computer.</li>
<li><code>gray-matter</code> helps extracting front matter from the a string or file.
Converts a string with front-matter, like this:</li>
</ol>
<pre tabindex="0"><code>    title: Hello
    slug: home
    ---
    &lt;h1&gt;Hello world!&lt;/h1&gt;
</code></pre><p>Into an object like this:</p>
<pre><code>{
content: '&lt;h1&gt;Hello world!&lt;/h1&gt;',
data: { 
    title: 'Hello', 
    slug: 'home' 
}
}
</code></pre>
<p>It then extracts the front matter and stores it in <code>data</code>. It then stores the content in <code>content</code> and returns the <code>filename</code> to the <code>main()</code> function. It then repeats the process for all the files in the directory.</p>
<ol start="3">
<li>
<p>The <code>main()</code> function then takes in one <code>filename</code> at a time and then parses it through <code>markdownit( ,{markdownitanchor})</code>. <code>markdownit</code> parses the file and converts the markdown content into HTML files. It then creates a <code>html</code> file and writes the parsed content into it. It then saves the <code>html</code> file in the <code>public</code> folder. This process repeats for all the files in the directory.</p>
</li>
<li>
<p>The converted html files are stored in the specified directories then using <code>mkdirp</code>. The <code>index.html</code> file isalready present in the <code>public</code> folder. <code>mkdirp</code> creates the directories if they do not exist.</p>
</li>
</ol>
<h3 id="3-generator-code">3. Generator Code</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">fs</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;fs&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">glob</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;glob&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">matter</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;gray-matter&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">mkdirp</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;mkdirp&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;path&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">hljs</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;highlight.js&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">MarkdownIt</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;markdown-it&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">markdownItAnchor</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;markdown-it-anchor&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">string</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;string&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">slugify</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">s</span> =&gt; <span style="color:#a6e22e">string</span>(<span style="color:#a6e22e">s</span>).<span style="color:#a6e22e">slugify</span>().<span style="color:#a6e22e">toString</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">md</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">MarkdownIt</span>({
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">html</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linkify</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">typographer</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">highlight</span>(<span style="color:#a6e22e">str</span>, <span style="color:#a6e22e">language</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">language</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">hljs</span>.<span style="color:#a6e22e">getLanguage</span>(<span style="color:#a6e22e">language</span>)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">hljs</span>.<span style="color:#a6e22e">highlight</span>(<span style="color:#a6e22e">str</span>, { <span style="color:#a6e22e">language</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">language</span> }).<span style="color:#a6e22e">value</span>;
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}).<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">markdownItAnchor</span>, { <span style="color:#a6e22e">slugify</span> });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">readFile</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">filename</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rawFile</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#a6e22e">filename</span>, <span style="color:#e6db74">&#39;utf8&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">parsed</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">matter</span>(<span style="color:#a6e22e">rawFile</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">html</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">md</span>.<span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> {...<span style="color:#a6e22e">parsed</span>, <span style="color:#a6e22e">html</span> }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">templatize</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">template</span>, { <span style="color:#a6e22e">date</span>, <span style="color:#a6e22e">title</span>, <span style="color:#a6e22e">content</span>, <span style="color:#a6e22e">author</span> }) =&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">template</span>
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/&lt;!-- PUBLISH_DATE --&gt;/g</span>, <span style="color:#a6e22e">date</span>)
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/&lt;!-- TITLE --&gt;/g</span>, <span style="color:#a6e22e">title</span>)
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/&lt;!-- CONTENT --&gt;/g</span>, <span style="color:#a6e22e">content</span>)
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/&lt;!-- AUTHOR --&gt;/g</span>, <span style="color:#a6e22e">author</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">saveFile</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">contents</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">dir</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">dirname</span>(<span style="color:#a6e22e">filename</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mkdirp</span>.<span style="color:#a6e22e">sync</span>(<span style="color:#a6e22e">dir</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">writeFileSync</span>(<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">contents</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">getOutputFilename</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">outPath</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">basename</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">basename</span>(<span style="color:#a6e22e">filename</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newfilename</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">basename</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">basename</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.html&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">outfile</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">outPath</span>, <span style="color:#a6e22e">newfilename</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">outfile</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">processFile</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">template</span>, <span style="color:#a6e22e">outPath</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readFile</span>(<span style="color:#a6e22e">filename</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">outfilename</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">getOutputFilename</span>(<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">outPath</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">templatized</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">templatize</span>(<span style="color:#a6e22e">template</span>, {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">date</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">date</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">title</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">content</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">html</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">author</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">author</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">saveFile</span>(<span style="color:#a6e22e">outfilename</span>, <span style="color:#a6e22e">templatized</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`📝 </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">outfilename</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">main</span> <span style="color:#f92672">=</span> () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">srcPath</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;content&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">outPath</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;public&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">template</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#e6db74">&#39;./templates/initial/template.html&#39;</span>, <span style="color:#e6db74">&#39;utf8&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">filenames</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">glob</span>.<span style="color:#a6e22e">sync</span>(<span style="color:#a6e22e">srcPath</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/**/*.md&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">filenames</span>.<span style="color:#a6e22e">forEach</span>((<span style="color:#a6e22e">filename</span>) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">processFile</span>(<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">template</span>, <span style="color:#a6e22e">outPath</span>)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">main</span>()
</span></span></code></pre></div><h2 id="get-started-with-zuzu">Get started with zuzu</h2>
<p>Fork and clone this repo.
Add your markdown files in the content folder, run <code>npm run generate</code> and find beautifully rendered html files in the public folder :)</p>
<h2 id="to-do">To-do</h2>
<ul>
<li>Add a proper template file in the initial folder with index.html and respective assets.</li>
<li>Create an executable for zuzu.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>vyse</title>
      <link>https://cbrtl.github.io/posts/vyse/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/vyse/</guid>
      <description>Vyse is a dynamically typed, interpreted and fast scriptling language inspired by Lua for rapid prototyping of applications like video games.</description>
      <content:encoded><![CDATA[<h1 id="vyse">Vyse</h1>
<br />
<p align="center">
  <a href="#">
    <img src="/assets/vyse_logo.svg" alt="Logo" width="200" height="200">
  </a>
  <h2 align="center">Vyse</h2>
  <p align="center">
   An elegant and embeddable programming language
    <br />
    <a href="https://github.com/srijan-paul/snap/blob/main/doc/manual.md"><b>Visit the language spec »</b></a>
    <a href="https://srijan-paul.github.io/vyse"><b>Website »</b>
    </a>
    <br />
    <br />
    <a href="https://github.com/srijan-paul/vyse/issues">Report Bug</a>
     •
    <a href="https://github.com/srijan-paul/vyse/issues">Request Feature</a>
  </p>
</p>
<p><a href="https://github.com/srijan-paul/snap/actions/workflows/test.yml/badge.svg">CI Status</a>
[<a href="https://img.shields.io/apm/l/atomic-design-ui.svg?">MIT License</a>](<a href="https://github.com/tterb/atomic-design-ui/blob/master/LICENSEs">https://github.com/tterb/atomic-design-ui/blob/master/LICENSEs</a>)</p>
<p>Vyse is a dynamically typed, interpreted and fast scriptling language inspired by Lua for rapid prototyping of applications like video games. Programmers familiar with Lua/Javascript can pick up the language within an hour.
Vyse also comes with a C++ API for frictionless embedding in projects.</p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#vyse">Vyse</a>
<ul>
<li><a href="#table-of-contents">Table of Contents</a></li>
<li><a href="#goal">Goal</a></li>
<li><a href="#overview">Overview</a></li>
<li><a href="#roadmap">Roadmap</a></li>
<li><a href="#implementation">Implementation</a>
<ul>
<li><a href="#lexing--tokenizing-source-string---token">Lexing / Tokenizing (Source string -&gt; Token)</a></li>
<li><a href="#compiling-tokens---bytecode">Compiling (Tokens -&gt; Bytecode)</a></li>
<li><a href="#vyvm">VyVM</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#building">Building</a></li>
<li><a href="#benchmarks">Benchmarks</a></li>
<li><a href="#tests">Tests</a></li>
<li><a href="#editor-support">Editor-Support</a></li>
<li><a href="#development">Development</a></li>
</ul>
<h2 id="goal">Goal</h2>
<p>Vyse aims to pick up after the Lua programming language, by adding popularly desired features on top of it,
whilst providing similar speed and minimalism as Lua.
There exist some quirks in Lua that Vyse aims to change.</p>
<ul>
<li>
<p>Variables are global by default</p>
</li>
<li>
<p>Long keywords like <code>local</code> and the use of <code>do .. end</code> to designate blocks instead of <code>{}</code> makes it unlikeable to programmers coming from C.</p>
</li>
<li>
<p>The concept of metatables and metamethods is somewhat unintuitive to new programmers.</p>
</li>
<li>
<p>Tables being used as both arrays and maps can have unwanted side effects.</p>
</li>
<li>
<p>Lacks many features that are common in other languages such as :</p>
<ul>
<li>Compound assignment operators (<code>+=</code>, <code>-=</code>, <code>*=</code>) and decrement and increment operators (<code>++</code>, <code>--</code>) .</li>
<li><code>continue</code> statement for skipping over some loop iterations.</li>
<li><code>switch</code> statements.</li>
</ul>
</li>
<li>
<p>Arrays starting at 1 is a a minor issue to some.</p>
</li>
</ul>
<p>Vyse aims to keep most of what Lua provides, but address the aforementioned issues and offer the following QoL feautures:</p>
<ul>
<li>A Familiar syntax for programmers migrating from Javascript and C</li>
<li>An easy to integrate C++ API for easy embedding in applications</li>
<li>Syntactic sugar for JS like OOP that boils down to the very same metatable and metamethod heirarchy.</li>
</ul>
<h2 id="overview">Overview</h2>
<p>Here is a rough overview of the language&rsquo;s syntax and features:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span><span style="color:#75715e">-- importing modules is done with the builtin &#39;import&#39; function</span>
</span></span><span style="display:flex;"><span>const math <span style="color:#f92672">=</span> import(<span style="color:#e6db74">&#34;math&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--  variable declaration and assignment</span>
</span></span><span style="display:flex;"><span>const PI <span style="color:#f92672">=</span> math.pi <span style="color:#75715e">-- variables declared with const are immutable</span>
</span></span><span style="display:flex;"><span>let radius <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--  Function declaration</span>
</span></span><span style="display:flex;"><span>fn calculate_area(r) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> PI <span style="color:#f92672">*</span> r <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span> <span style="color:#75715e">-- &#39;**&#39; operator is used for exponentiation.</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>let area <span style="color:#f92672">=</span> calculate_area(radius) <span style="color:#75715e">-- function calling</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--  constructing objects is very similar to Javascript.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>let goblin <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  name: <span style="color:#e6db74">&#34;Bobo&#34;</span>,
</span></span><span style="display:flex;"><span>  health: <span style="color:#ae81ff">12</span>,
</span></span><span style="display:flex;"><span>  damage: <span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>  attack(target) {
</span></span><span style="display:flex;"><span>    target.health <span style="color:#f92672">-=</span> this.damage
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;Goblin attacks!&#34;</span>)
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--  methods is done with the `:` operator.</span>
</span></span><span style="display:flex;"><span>let wolf <span style="color:#f92672">=</span> { health: <span style="color:#ae81ff">20</span> }
</span></span><span style="display:flex;"><span>goblin:attack(wolf)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--  Arrays are intuitive too</span>
</span></span><span style="display:flex;"><span>let numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- the &#39;#&#39; operator returns length of lists or strings.</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;I have &#39;</span> <span style="color:#f92672">..</span> <span style="color:#f92672">#</span>numbers <span style="color:#f92672">..</span> <span style="color:#e6db74">&#39;numbers!&#39;</span>) <span style="color:#f92672">//</span> <span style="color:#e6db74">&#39;..&#39;</span> is the concat operator
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- the `&lt;&lt;&lt;` operator can be used to push to arrays</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- looping is very similar to lua.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#f92672">#</span>numbers  {
</span></span><span style="display:flex;"><span>	print(numbers[i])
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--  conditionals</span>
</span></span><span style="display:flex;"><span>math.randseed(time.now());
</span></span><span style="display:flex;"><span>const number <span style="color:#f92672">=</span> math.random(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>let guess <span style="color:#f92672">=</span> input():to_number(); <span style="color:#75715e">-- read user input and parse as a number</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> guess <span style="color:#f92672">&lt;</span> number {
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;Too low! Try higher&#34;</span>)
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> guess <span style="color:#f92672">&gt;</span> number {
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;Too hight! Guess lower&#34;</span>)
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;You guessed it! The number was &#34;</span> <span style="color:#f92672">..</span> number);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>For a more complete spec of the language, and all it&rsquo;s features visit <a href="./doc/manual.md">manual.md</a>.
Alternatively, read the documentation on <a href="https://srijan-paul.github.io/vyse/book/">this</a> page.</p>
<h2 id="roadmap">Roadmap</h2>
<p>Currently, vyse supports basic control flow, variable declaration, usage and basic collection data structures.
To move towards a more complete implementation, the following tasks have to be attended to:</p>
<ol>
<li><input checked="" disabled="" type="checkbox"> Implement parent tables (metatables in Lua). (<strong>DONE</strong>)</li>
<li><input checked="" disabled="" type="checkbox"> Add a complete list of collection types (Arrays and tables). (<strong>DONE</strong>)</li>
<li><input checked="" disabled="" type="checkbox"> Implement proper error reporting in all the passes. (<strong>DONE</strong>)</li>
<li><input checked="" disabled="" type="checkbox"> Full support for Lambdas and closures. (<strong>DONE</strong>)</li>
<li><input disabled="" type="checkbox"> Optimze value representation to optionally NaN boxed values.</li>
<li><input disabled="" type="checkbox"> Optimize the garbage collector for incremental collection.</li>
<li><input disabled="" type="checkbox"> Optimize the VM&rsquo;s loop-dispatch to computed jumps.</li>
<li><input disabled="" type="checkbox"> Add more compiler passes for better optimization.</li>
</ol>
<h2 id="implementation">Implementation</h2>
<p>Vyse runs on the Vyse Virtual Machine (svm for short). The VM has a stack based architechture that operates on 1 byte long opcodes. To keep the implementation concise and simple, vyse uses a single pass compiler that directly consumes tokens
and emits bytecode.</p>
<p>The stages involved are :</p>
<h3 id="lexing--tokenizing-source-string---token">Lexing / Tokenizing (Source string -&gt; Token)</h3>
<p>The vyse lexer resides in the <code>include/scanner.hpp</code> file, A simple hand written lexer that accepts a string returns a
token whenever the method <code>next_token()</code> is called.
The Lexer is called from within the Compiler, but can also be instantiated and used stand-alone for testing purposes.</p>
<h3 id="compiling-tokens---bytecode">Compiling (Tokens -&gt; Bytecode)</h3>
<p>The Compiler compiles tokens to Bytecode following the Vyse Bytecode Instruction format (<code>include/x_opcode.hpp</code>).
Every instruction is 1 byte long. The compiler returns a function containing all the bytecode from the script, which is
then loaded into the VM and called.</p>
<h3 id="vyvm">VyVM</h3>
<p>The design of the VyVM is very similar to the Lua Virtual Machine despite the fact that it&rsquo;s Stack based as opposed to LuaVM&rsquo;s register based design (after version 5.1). It consists of a value stack and an accumulator register.
It has full support for lambdas and closures following Lua&rsquo;s upvalue design.</p>
<h1 id="building">Building</h1>
<p>To build vyse from source, it is recommended that you use CMake (version 3.13 or higher).
The build tool used here is Ninja, but you can use any other build tool of your preference (eg- <code>'Unix Makefiles'</code>).</p>
<p>After downloading/cloning vyse into a directory, <code>cd</code> into it and run the following commands to run the tests:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir build
</span></span><span style="display:flex;"><span>cd build
</span></span><span style="display:flex;"><span>cmake .. -G Ninja -DBUILD_TESTS<span style="color:#f92672">=</span>true -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Debug -DSTRESS_GC<span style="color:#f92672">=</span>true -DCMAKE_EXPORT_COMPILE_COMMANDS<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -DCMAKE_C_COMPILER<span style="color:#f92672">=</span>clang -DCMAKE_CXX_COMPILER<span style="color:#f92672">=</span>clang++
</span></span><span style="display:flex;"><span>ninja
</span></span><span style="display:flex;"><span>./vy &lt;filename&gt;
</span></span></code></pre></div><p>The CMake script accepts some options, namely:</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Values</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-DCMAKE_BUILD_TYPE</code></td>
<td><code>Release</code>/<code>Debug</code></td>
<td>Compilation mode for the C++ compiler. Also enables runtime assertions.</td>
</tr>
<tr>
<td><code>-DBUILD_TESTS</code></td>
<td><code>true</code>/<code>false</code></td>
<td>Whether to build the test suite.</td>
</tr>
<tr>
<td><code>-DSTRESS_GC</code></td>
<td><code>true</code>/<code>false</code></td>
<td>When <code>true</code>, runs the garbage collector whenever possible. Useful for catching GC bugs.</td>
</tr>
<tr>
<td><code>-DLOG_GC</code></td>
<td><code>true</code>/<code>false</code></td>
<td>When <code>true</code>, logs the GC status on every cycle.</td>
</tr>
<tr>
<td><code>-DLOG_DISASM</code></td>
<td><code>true</code>/<code>false</code></td>
<td>When <code>true</code>, dumps the bytecode disassembly of every program after the compiler pass, before running it on the VM</td>
</tr>
</tbody>
</table>
<p>Note that <code>-CMAKE_C_COMPILER=clang -CMAKE_CXX_COMPILER=clang++</code> are optional, and you can use any C++ compiler toolchain of your liking.
The aforementioned snippet will build the project in debug mode, which is preferred for development but is much, much slower.</p>
<p>For an optimized release build, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cmake .. -G Ninja -DBUILD_TESTS<span style="color:#f92672">=</span>true -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Release -DSTRESS_GC<span style="color:#f92672">=</span>false -DLOG_GC<span style="color:#f92672">=</span>false -DLOG_DISASM<span style="color:#f92672">=</span>false
</span></span></code></pre></div><h1 id="benchmarks">Benchmarks</h1>
<p>The benchmarks for vyuse are present in the <code>benchmark</code> directory.
The <code>benchmark/run.py</code> script can be used to compare Vyse against other languages.
You can either run all benchmarks, or run specific benchmarks.</p>
<p>First, create and activate a virtual environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd benchmarks
</span></span><span style="display:flex;"><span>python3 -m venv env
</span></span><span style="display:flex;"><span>source env/bin/activate
</span></span></code></pre></div><p>Then, install all the dependencies inside the virtual environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>python3 -m pip install -r requirements.txt
</span></span></code></pre></div><p>To run all benchmarks, enter the following into your shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd benchmarks
</span></span><span style="display:flex;"><span>python3 run.py
</span></span></code></pre></div><p>To run, a specific benchmark, use the <code>--bench</code> option:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>python3 run.py --bench<span style="color:#f92672">=</span>fib
</span></span></code></pre></div><h1 id="tests">Tests</h1>
<p>For testing, the <code>ctest</code> utility is used along with some hand written helper headers.
To run existing tests, run <code>ctest</code> inside the build directory (<code>bin</code> or <code>out</code>).
Tests of all kinds can be found under the <code>test</code> directory.</p>
<p></p>
<p>(Note: time is in seconds)</p>
<p>If your terminal does not have ASNI support, or you want to pipe the benchmarks to a
file for reporting, then you can use the <code>--nocolor</code> flag.</p>
<h1 id="editor-support">Editor-Support</h1>
<p>Currently, syntax highlighting and code completion snippets are supported on the following code editors:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/srijan-paul/vscode-vyse">VS Code</a></li>
<li><input disabled="" type="checkbox"> Sublime text [In Progress]</li>
<li><input disabled="" type="checkbox"> Vim [Coming soon]</li>
<li><input disabled="" type="checkbox"> Atom [Coming soon]</li>
</ul>
<h1 id="development">Development</h1>
<p>If you&rsquo;re looking to contribute to vyse, It is recommended to have clang-format for formatting and clangd language server for your text editor.
On VSCode, the <code>C/C++</code> extension can be used to debug the executable.
Alternatively, you can use GDC/LLDB or other debuggers to your liking.</p>
<p>The sources are in <code>src/</code> while the public headers are in <code>include/</code>.
A basic CLI module is present under <code>cli/</code>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Project: Ratenect</title>
      <link>https://cbrtl.github.io/posts/ratenect/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/ratenect/</guid>
      <description>Connecting Help and Transparency</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>NOTE</strong>: This project is being maintained by <a href="https://github.com/Ankur-Khandelwal">Ankur Khandelwal</a></p>
</blockquote>
<p></p>
<p>India has over <a href="https://www.icnl.org/resources/civic-freedom-monitor/india#:~:text=The%20Central%20Statistical%20Institute%20of,certified%20NGOs%20on%20its%20portal.">3.2 million</a> registered <a href="https://en.wikipedia.org/wiki/Non-governmental_organization">NGOs</a> (Non-Governmental Organisations) across its territory. The voluntary sector has always played an important role in supporting the government as a partner in nation-building and is heavily funded by the government as well as by private institutions. In 2018 only, companies contributed US$1 Billion to <a href="https://www.india-briefing.com/news/corporate-social-responsibility-india-5511.html">CSR</a> initiatives, according to a survey.</p>
<p>Considering the vast impact and significance of the sector, it becomes very important to tackle the challenges present here as well as to improve and increase its accessibility.</p>
<p>We have noticed two major problems in this sector:</p>
<ul>
<li>The credibility of NGOs is a major concern for fund donors especially Government and Corporate Institutions.</li>
<li>No easy way exists for the general public to find reliable local NGOs and volunteer for them.</li>
</ul>
<p>With the vision to tackle both the problems together, we propose a solution called <strong>Ratenect</strong>.</p>
<p>Ratenect is a web/mobile platform with a two-way rating system. The workflow of Ratenect is depicted by the illustration below:</p>
<p></p>
<h2 id="what-will-the-interface-look-like">What will the interface look like?</h2>
<p>For the start, we have to keep things simple and eventually we shall ramp up the platform. The simple web/mobile interface will be as:</p>
<ul>
<li>
<h3 id="for-ngos">For NGOS:</h3>
<ul>
<li>Sign up and login pages.</li>
<li>An account page, where there will be overview volunteers applied, donations received through this platform, and the option to update their details.</li>
<li>An applications page, where they can see the details of the volunteers applied and can accept and reject the applications.</li>
<li>A donations page, where they can see details of donations.</li>
<li>A page to make public posts about their work for which they need volunteers to lend help.</li>
<li>A feeds page where they can see other NGOs posts.</li>
</ul>
</li>
<li>
<h3 id="for-volunteers">For Volunteers:</h3>
<ul>
<li>Sign up and login pages.</li>
<li>An account page where there will be an overview of their own work, account details, updating details option.</li>
<li>A feed (landing page) where they can see the NGOs available nearby them, a search bar through which NGOs can be searched based on location entered.</li>
<li>When they can click on an NGO name, they can see the complete details of the NGO, its posts, location and click on the &lsquo;Apply&rsquo; button to express their interest to volunteer.</li>
</ul>
</li>
</ul>
<p>An estimated interface design of the mobile application:</p>
<p></p>
<p></p>
<h2 id="proposed-technical-implementation">Proposed Technical Implementation:</h2>
<p>There shall be two platforms - Web and Mobile. For both the platforms we shall have the same backend for API and endpoints. The proposed tech stack is as follows:</p>
<h3 id="web">Web</h3>
<ul>
<li><strong>Frontend</strong>: React</li>
<li><strong>Backend</strong>: Node, Express</li>
<li><strong>Database</strong>: MongoDB</li>
<li><strong>Hosting</strong>: AWS</li>
</ul>
<h3 id="mobile">Mobile:</h3>
<ul>
<li><strong>Frontend</strong>: Flutter</li>
<li><strong>Backend</strong>: Same as above</li>
</ul>
<h3 id="link-to-the-repositories">Link to the repositories:</h3>
<ul>
<li><strong>Backend</strong>:  <a href="https://github.com/cbrtl/ratenect-backend">https://github.com/cbrtl/ratenect-backend</a></li>
<li><strong>Frontend</strong>: <a href="https://github.com/cbrtl/ratenect-frontend">https://github.com/cbrtl/ratenect-frontend</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://cbrtl.github.io/posts/faq/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/faq/</guid>
      <description>Before you ask...</description>
      <content:encoded><![CDATA[<h3 id="why-the-weird-name">Why the weird name?</h3>
<p>It comes from the C stdlib function <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/cbrt-cbrtf-cbrtl?view=msvc-160">cbrtl</a>.</p>
<p>But why does the C standard library have these weird names?</p>
<p>Well there is a little bit of trivia to it, in older versions of ANSI C, only the first 6 characters of an
identifier were considered in the compiler.
So most standard library functions in C have odd names like <code>strstr</code>, <code>strtod</code>, <code>alloca</code> and so on&hellip;</p>
<p>Oh, and also because every other GitHub organization name was taken&hellip;</p>
<h3 id="why-conjure-a-community-out-of-nowhere">Why conjure a community out of nowhere?</h3>
<p>Some of my acquaintances from other colleges have clubs, groups and spaces dedicated to open source and software
development. Couple of days ago, I came across IIT Roorkee&rsquo;s <a href="https://sdslabs.co/">SDSLabs </a> and PES Uni&rsquo;s <a href="https://pesos.github.io/">PES Open Source</a>.  After looking into it
a bit more, turns out most colleges these days have their own groups for related stuff.</p>
<p>We thought it would be fun to have a similar group of like minded developers from our college.</p>
<p>Is it too ambitious? We won&rsquo;t know until we don&rsquo;t try.</p>
<h3 id="what-is-it-that-cbrtl-aims-to-do-exactly">What is it that cbrtl aims to do exactly?</h3>
<p>Good question. We don&rsquo;t have a concrete answer because the direction we end up going in will be decided by the fellow community members. That said, I&rsquo;ll throw in most of what we&rsquo;ve gathered from our goal so far, and you decide if you like the sound of it.</p>
<ul>
<li>Contributing to Open Source.</li>
<li>Forming teams for hackathons and CP events.</li>
<li>Collaborating on projects together.</li>
<li>Showcasing projects from individuals and teams.</li>
<li>Code reviews and educational blogs (ones that haven&rsquo;t been done to death before&hellip;).</li>
</ul>
<h3 id="what-platforms-are-you-present-on">What platforms are you present on?</h3>
<p>For now, our presence is limited to <a href="https://discord.gg/3qry3u569v">Discord</a> and the <a href="https://github.com/cbrtl">GitHub organization</a>.
Mostly because these are very solid platforms and we are tight on the number of people moderating.</p>
<h3 id="what-skills-do-i-need">What skills do I need?</h3>
<p>Not much.</p>
<ul>
<li>The ability to code.</li>
<li>The willingness to learn.</li>
<li>Basic knowledge of Git and GitHub.</li>
</ul>
<p>Even 1 and 3 are optional.</p>
<h3 id="where-do-i-join">Where do I join?</h3>
<p>As mentioned earlier,  you can join the <a href="https://discord.gg/3qry3u569v">Discord</a> and the <a href="https://github.com/cbrtl">GitHub organization</a>.
More info on <a href="/">Getting started with cbrtl and Open Source</a>.</p>
<h3 id="is-there-anything-i-can-do-to-help">Is there anything I can do to help?</h3>
<p>Yes. <del>PayTM me some cash</del>. <em>ahem</em>, you can volunteer to help us keep the community thriving. We are looking for volunteers who can help with:</p>
<ul>
<li><strong>Front end development</strong>: To touch up the current blog site.</li>
<li><strong>Moderation</strong>: To manage the discord server and the GitHub org.</li>
<li><strong>Code reviews</strong>: To mandate some code quality for those who demand it.</li>
<li><strong>Technical Writers</strong>: To aid in writing blog posts.</li>
<li><strong>Editors</strong>: A second pair of eyes helps catch common mistakes in writing :)</li>
</ul>
<h3 id="is-this-an-official-college-club">Is this an official college club?</h3>
<p>Nope, not yet. This is an entirely independent student initiative that is looking for active participation.
This is a mostly decentralized group of like-minded programmers.</p>
<h3 id="will-there-be-exciting-cash-prizes">Will there be exciting cash prizes?</h3>
<p>No. I want to be upfront about it. Those of us who end up forming hackathon teams may earn some on their own,
but we want to keep this community closeted to people who code because they like making fun stuff. Of course,
that is not to say we discredit any other motivation you may have.</p>
<p>As such, we won&rsquo;t conduct any competitions with cash prizes for the foreseeable future.
Other clubs (which are official) in our college do a great job at that regardless.</p>
<h3 id="what-kinds-of-events-can-i-expect">What kinds of events can I expect?</h3>
<p>Other than project showcases and on-demand code review sessions, we are open to other ideas.</p>
<p>Not as much of an &rsquo;event&rsquo; but you can expect group projects that will (hopefully) be active throughout.</p>
<h3 id="i-have-some-other-questions-where-can-i-ask">I have some other questions, where can I ask?</h3>
<p>You&rsquo;re more than welcome on the mailing list, or in the discord server 😁</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Showcasing your project on cbrtl</title>
      <link>https://cbrtl.github.io/posts/project-showcase/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/project-showcase/</guid>
      <description>Some things to keep in mind while adding your project</description>
      <content:encoded><![CDATA[<p>Helloo again.</p>
<p>This post intends to establish some minor ordinances surrounding project ideas and showcases.
cbrtl was created with the intent of promoting the spirit of Open Source.
Often times, some of the most interesting Open Source projects live in lesser known corners of GitHub, gathering dust on a lonesome profile with 3-5 followers and an occasionally active commit graph.</p>
<p>With cbrtl, we can shine some light on these pieces of software, benefitting both the
creator/maintainer and the people who can use these projects as reference.</p>
<p>That said, the word &ldquo;interesting&rdquo; isn&rsquo;t nearly enough to distinguish a project that
can be showcased from one that is a jotted down YouTube tutorial.
It is in everyone&rsquo;s benefit to maintain a certain standard and few (lax) rules.</p>
<h1 id="what-constitutes-showcase-worthy-software">What constitutes showcase-worthy software?</h1>
<p>Anything that <strong>serves a clear purpose</strong>.</p>
<p>I have the urge to say &ldquo;anything that <strong>you</strong> create&rdquo;, but this statement leaves a lot of leeway
for lazy/tutorial projects. The rules will still be rather lax.</p>
<p>A project can be showcased if it satisfies the following criteria:</p>
<ul>
<li>Has a proper github <code>README.md</code></li>
<li>Is <strong>not</strong> tutorial material. So anything along these lines is generally discouraged:
<ul>
<li>&ldquo;todo app in react&rdquo;</li>
<li>&ldquo;planner app in vue&rdquo;</li>
<li>&ldquo;terminal tic-tac-toe with C&rdquo;</li>
<li>and so on&hellip;</li>
</ul>
</li>
<li>Is being actively worked on by it&rsquo;s developer(s).
It is <strong>OK</strong> even if it&rsquo;s in infancy when the project
is first showcased.</li>
<li>Is open to contribution from people.</li>
<li>Is not a lazy fork (Forks that are some-what different from the parent repos are absolutely okay).</li>
</ul>
<p>If you cross out any projects that don&rsquo;t match the above criteria, all that remains is an honest-to-god
project that could use some publicity :)</p>
<h2 id="examples">Examples</h2>
<p>Here&rsquo;s a few examples to show what we mean by &ldquo;showcase-able projects&rdquo;.
Note that not all of them are from the members of cbrtl, since we&rsquo;re just getting started out.</p>
<ul>
<li><a href="https://github.com/karnkaul/LittleEngineVk">levk</a>: A 3D Game engine written in C++ and
Vulkan. <strong>Author: <a href="https://github.com/karnkaul">karnage</a></strong></li>
<li><a href="https://aitikgupta.github.io/sociomark/">SocioMark</a>: A social media platform with
plagiarism and attack-proof authenticity checks for user uploaded content.
<strong>Author: <a href="https://github.com/aitikgupta">Aitik Gupta</a></strong></li>
<li><a href="https://github.com/srijan-paul/snap">vyse</a>: A fast, dynamically typed and interpreted programming
language. <strong>Author: <a href="https://github.com/srijan-paul">srijan_</a></strong> (<em>cough</em> self-plug)</li>
<li><a href="https://github.com/karnkaul/locc">locc</a>: A C++ utility to count lines of code in a project.
<strong>Author: <a href="https://github.com/karnkaul">karnage</a></strong></li>
<li><a href="https://github.com/rxi/lume">lume</a>: A Lua library for gamedev. <strong>Author: <a href="https://github.com/rxi">rxi</a></strong></li>
</ul>
<p><strong>NOTE</strong>: Not all future project additions need to be nearly as complex as the projects listed above.</p>
<p>But there is a common running theme with these that you may have caught on to by now.
All these projects are really <em>cool</em> but <em>under-represented</em>.
That right there, is what we&rsquo;re trying to solve.</p>
<p>We want <em>your</em> projects that you build individually or in teams, to get the recognized in a community and to get feedback from
reviewers/users.</p>
<h1 id="getting-your-project-showcased">Getting your project showcased.</h1>
<p>Wooookay, now we get to the point.
You have made something, or at least the skeleton of something that will go on to become
a full fledged project. How do you put your code and product on cbrtl? Heres how.</p>
<ol>
<li>Reach out to use either on the mailing list, or on the discord server</li>
<li>Have the following ready:
<ul>
<li>A GitHub repo with a well set-up <code>README</code></li>
<li>A short/long write-up describing the scope, aim, tech-stack and architecture
of your project. (Need not be serious at all)</li>
</ul>
</li>
<li>Shoot any moderator with the aforementioned and we&rsquo;ll give you:
<ul>
<li>A GitHub repo symlink (<em>symlink?</em>) on the <a href="https://github.com/cbrtl">cbrtl org page</a>.</li>
<li>A community showcase.</li>
<li>A blog post referencing the content from your write-up, describing the project.</li>
<li>Encourage other members to collaborate and contribute.</li>
</ul>
</li>
</ol>
<p>A good place to start getting involved can be our <a href="https://discord.gg/3qry3u569v">Discord server</a>.</p>
<h1 id="have-an-idea-want-a-team">Have an idea? Want a team?</h1>
<p>It is not so uncommon for programmers to get an idea but not have enough
time commitment (or knowledge) to drive the idea to fruition. If that&rsquo;s how things end up
for you, then let us know about your ideas and we can see if enough members in the community
are interested to collaborate.</p>
<p>We may be able to help turn your solo idea into a collaborative work environment.
You can choose to have the repo be on the org, or on your GitHub profile.</p>
<h1 id="closing-with-some-general-thoughts-and-other-goals">Closing with some general thoughts and other goals.</h1>
<p>In the future, we also want to create teams for <strong>Hackathons</strong> and <strong>Competitive Programming</strong> events
(I&rsquo;m <strong>not</strong> a fan of the latter personally, but I understand people will have differing opinions).</p>
<p>As mentioned in the previous post, we are looking for some volunteers in content writing, editing, front-end dev,
code reviews and moderation.
If you have any other ideas in general that can help us grow, let us know :)</p>
<p>Reach out to us if you&rsquo;re a programmer and want to join a community of people who
like to create.</p>
<p>What else do I say, we&rsquo;re just getting started out after all.</p>
<p>Adios.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting started with cbrtl and FOSS</title>
      <link>https://cbrtl.github.io/posts/getting-started/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cbrtl.github.io/posts/getting-started/</guid>
      <description>Grinding your gears</description>
      <content:encoded><![CDATA[<p>So you read up on open source, read up on <a href="https://cbrtl.github.io/posts/what-and-why/">cbrtl</a> and want to start hacking.
There are some preliminaries that you should take care of first. I will list them in order:</p>
<ol>
<li>Create a GitHub account.</li>
<li>Set up git on your local computer.
<ul>
<li>If you&rsquo;re on windows, download <a href="https://git-scm.com/downloads">GitBash</a> and follow the install instructions.</li>
<li>Get a personal test repo set up and try out commands like <code>push</code>, <code>commit</code>, <code>pull</code> etc.</li>
</ul>
</li>
<li>Join the <a href="https://github.com/cbrtl">GitHub organization</a> by adding yourself to the members list (More on that below).</li>
<li>Join the <a href="https://discord.gg/3qry3u569v">Discord server</a>.</li>
</ol>
<p>Alright, you&rsquo;re set to start out.
At this point, I would recommend getting familiar with GitHub, reading up some articles and blogs.
I highly recommend <a href="https://www.atlassian.com/git/tutorials">Atlassian&rsquo;s git tutorials</a> and documentation.</p>
<h1 id="making-your-first-pull-request">Making your first Pull Request</h1>
<p>(<strong>NOTE:</strong> If you have experience using git and don&rsquo;t want to waste time, just ping the <code>@cbrtl moderator</code> role on discord and we&rsquo;ll add you).</p>
<p>If you had to follow through the above, then it&rsquo;s likely that you&rsquo;ve never made a PR before.
To get your feet wet, make your first PR on our <a href="https://github.com/cbrtl/members-list">member&rsquo;s list repo</a>.
Once you do that, you&rsquo;ll be recognized as a member of cbrtl on GitHub.
You will find a step by step guide on how to do that on the repository&rsquo;s <code>README</code>.</p>
<p>Done? Great! 🎉</p>
<p>Now you&rsquo;re going to have to wait for a moderator to merge your PR.
That should be done by the time you&rsquo;re done reading this article ;)</p>
<h1 id="getting-the-most-out-of-it">Getting the most out of it</h1>
<p>The way you grow and shape your journey into Open Source is dictated by your level of engagement with people, and participation
in projects, discussions and the like.
Now then, how do you define &ldquo;engagement&rdquo; and &ldquo;participation&rdquo;?
It can mean different things for different people, but the recurring ideas are the same.</p>
<h2 id="ways-to-participate">Ways to participate</h2>
<ul>
<li>Contributing to the <a href="https://github.com/cbrtl/cbrtl-site">blog</a>.</li>
<li>Part-taking in open source projects being built in the community.</li>
<li>Coming up with your own project ideas, and getting people to contribute.</li>
<li>Showcasing projects you have made on cbrtl blog and GitHub organization.</li>
<li>Contributing to larger open source projects outside cbrtl.</li>
<li>Asking questions, getting to know people better.</li>
<li>Volunteering on development and content moderation. <a href="http://cbrtl.github.io/posts/what-and-why/#volunteering-to-cbrtl">Details here</a></li>
</ul>
<h2 id="starting-your-own-project">Starting your own project.</h2>
<p>It would be great to have more interesting projects available for people to work on.
Look at the <a href="http://cbrtl.github.io/posts/project-showcase/">project showcase post</a> for relevant information.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
